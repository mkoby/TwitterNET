<?xml version="1.0" encoding="utf-8"?>
<project name="TwitterNET" xmlns="http://nant.sf.net/release/0.85/nant.xsd" default="build">
  <!-- Properties -->
  <property name="project.config" value="release"/>
  <property name="build.os" value="${operating-system::get-platform(environment::get-operating-system())}" />

  <!-- Folders & Files -->
  <property name="file.sep" value="\" />
  
  <if test="${build.os == 'Unix'}" >
     <property name="file.sep" value="/" />
  </if>
  
  <property name="dir.solution" value="${directory::get-current-directory()}${file.sep}src"/>
  <property name="dir.build" value="${directory::get-current-directory()}${file.sep}build"/>
  <property name="dir.buildreports" value="${dir.build}${file.sep}reports"/>
  <property name="dir.xslt" value="${directory::get-current-directory()}${file.sep}lib${file.sep}xslt" />
  
  <!--Compilation Properties-->
  <if test="${build.os != 'Unix'}">
       <property name="nant.settings.currentframework" value="net-3.5"/>
  </if>
  <if test="${build.os == 'Unix'}" >
       <property name="nant.settings.currentframework" value="mono-3.5"/>     
  </if>
  <property name="file.solution" value="${dir.solution}${file.sep}${project::get-name()}.sln"/>
  <property name="framework.path" value="${framework::get-framework-directory(framework::get-target-framework())}" />
  <if test="${build.os != 'Unix'}" >
       <property name="build.exe" value="${framework.path}${file.sep}msbuild.exe"/>
  </if>
  <if test="${build.os == 'Unix'}" >
       <property name="build.exe" value="gmcs"/>
  </if>
  
  <!-- Testing Properties -->
  <property name="dir.nunit" value="${directory::get-current-directory()}${file.sep}lib${file.sep}nunit${file.sep}bin" />
  <property name="dir.nunit.addins" value="${dir.nunit}${file.sep}addins" />
  <property name="nunit.exe" value="${dir.nunit}${file.sep}nunit-console-x86.exe" />
  <property name="nunitconsole" value="${dir.nunit}${file.sep}nunit-console.exe" />
  <property name="assembly.unittests" value="${project::get-name()}_Tests.dll" />
  <property name="nunit.xslt" value="lib${file.sep}xslt${file.sep}tests.xsl" />
  <property name="partcover.exe" value="${directory::get-current-directory()}${file.sep}lib${file.sep}partcover${file.sep}partcover.exe" />
  <property name="ncover.dir" value="${directory::get-current-directory()}${file.sep}lib${file.sep}NCover" />
  <property name="ncover.exe" value="${ncover.dir}${file.sep}NCover.Console.exe" />
  <property name="ncover.xslt" value="${ncover.dir}${file.sep}Coverage.xsl" />

  <!-- Load additional NAnt Contrib tasks -->
  <loadtasks assembly="${directory::get-current-directory()}${file.sep}lib${file.sep}nantcontrib${file.sep}bin${file.sep}NAnt.Contrib.Tasks.dll"  />
  
  <target name="build" depends="init, compile, testing" description="The main build target that builds TwitterNet"/>
  
  <target name="clean" depends="init" description="Cleans up from a previous build">
     <if test="${build.os != 'Unix'}"> <!-- CLEAN Build on Windows -->
	     <exec program="${build.exe}" 
               commandline="${file.solution} /t:Clean /p:Configuration=${project.config};outdir=${dir.build}${file.sep}  /v:q" verbose="true" />
     </if>
	
	<delete dir="${dir.build}" if="${directory::exists(dir.build)}" />	
  </target>

  <target name="init" depends="" description="Sets up the files, optizons, and folders for the build">
    <delete dir="${dir.build}" if="${directory::exists(dir.build)}" />
    <mkdir dir="${dir.build}" />
    <mkdir dir="${dir.buildreports}" />
    
    <!--Settings Output-->
    <echo message="Operating System: ${build.os}" />
    <echo message="Solution Folder: ${dir.solution}"/>
    <echo message="Solution File: ${file.solution}"/>
    <echo message="Build Folder: ${dir.build}"/>
    <echo message="Framework Path: ${framework.path}" />
    <if test="${build.os != 'Unix'}">
         <echo message="msbuild: ${msbuild.exe}"/>
    </if>
  </target>

  <target name="compile" depends="init" >
    <echo message="Build Directory is ${dir.build}"/>
    <echo message="Building solution: ${file.solution}" />
	
	<if test="${build.os != 'Unix'}"> <!-- Build on Windows -->
	     <exec program="${build.exe}" 
               commandline="${file.solution} /t:Clean /p:Configuration=${project.config};outdir=${dir.build}${file.sep}  /v:q" verbose="true" />
	     <exec program="${build.exe}" 
               commandline="${file.solution} /t:Build /p:Configuration=${project.config};outdir=${dir.build}${file.sep}  /v:q" verbose="true" />
     </if>
     
     <if test="${build.os == 'Unix'}"> <!-- Build on Linux -->
          <exec program="${build.exe}"
               commandline="&quot;/out:${dir.build}${file.sep}TwitterNET.dll&quot; 
                    &quot;/r:System.dll&quot; &quot;/r:System.Core.dll&quot; 
                    &quot;/r:System.Web.dll&quot; &quot;/r:System.Xml.Linq.dll&quot; 
                    &quot;/r:System.Data.DataSetExtensions.dll&quot; 
                    &quot;/r:System.Data.dll&quot; &quot;/r:System.Xml.dll&quot; 
                    /noconfig /nologo /warn:4 /optimize- /codepage:utf8 
                    /define:&quot;RELEASE&quot; /t:library 
                    &quot;src/TwitterNET/Exceptions/TwitterNETWebException.cs&quot; 
                    &quot;src/TwitterNET/ResponseParser.cs&quot; 
                    &quot;src/TwitterNET/Properties/AssemblyInfo.cs&quot; 
                    &quot;src/TwitterNET/RequestHandler.cs&quot; 
                    &quot;src/TwitterNET/Twitter.cs&quot; 
                    &quot;src/TwitterNET/User.cs&quot; 
                    &quot;src/TwitterNET/RequestOptions.cs&quot; 
                    &quot;src/TwitterNET/Interfaces/IUser.cs&quot; 
                    &quot;src/TwitterNET/Exceptions/TwitterNetException.cs&quot; 
                    &quot;src/TwitterNET/Message.cs&quot; 
                    &quot;src/TwitterNET/StatusMessage.cs&quot; 
                    &quot;src/TwitterNET/DirectMessage.cs&quot;" 
               verbose="true"/>
               
          <exec program="${build.exe}" 
               commandline="&quot;/out:${dir.build}${file.sep}TwitterNET_Tests.dll&quot; 
                    &quot;/r:lib/nunit/bin/nunit.framework.dll&quot; 
                    &quot;/r:System.dll&quot; &quot;/r:System.Core.dll&quot; 
                    &quot;/r:System.Xml.Linq.dll&quot; 
                    &quot;/r:System.Data.DataSetExtensions.dll&quot; 
                    &quot;/r:System.Data.dll&quot; &quot;/r:System.Xml.dll&quot; 
                    &quot;/r:src/TwitterNET/bin/Debug/TwitterNET.dll&quot; 
                    /noconfig /nologo /warn:4 /optimize- /codepage:utf8 /define:&quot;RELEASE&quot; 
                    /t:library 
                    &quot;src/TwitterNET_Tests/TwitterNET_Friendship_Tests.cs&quot; 
                    &quot;src/TwitterNET_Tests/TwitterNET_FriendsTimeLine_Tests.cs&quot; 
                    &quot;src/TwitterNET_Tests/TwitterNET_Mentions_Tests.cs&quot; 
                    &quot;src/TwitterNET_Tests/TwitterNET_Notifications_Tests.cs&quot; 
                    &quot;src/TwitterNET_Tests/TwitterNET_SocialGraph_Tests.cs&quot; 
                    &quot;src/TwitterNET_Tests/TwitterNET_Tests.cs&quot; 
                    &quot;src/TwitterNET_Tests/Properties/AssemblyInfo.cs&quot; 
                    &quot;src/TwitterNET_Tests/TwitterNET_UserTimeLine_Tests.cs&quot; 
                    &quot;src/TwitterNET_Tests/RequestOptions_Tests.cs&quot; 
                    &quot;src/TwitterNET_Tests/TwitterNET_Favorites_Tests.cs&quot; 
                    &quot;src/TwitterNET_Tests/TwitterNET_DirectMsgs_Tests.cs&quot;" 
               verbose="true"/>
     </if>
     
     
  </target>

  <target name="testing" depends="init, compile">
	<if test="${property::exists('teamcity.dotnet.nunitaddin')}">
		<mkdir dir="${dir.nunit.addins}" />
		<copy file="${teamcity.dotnet.nunitaddin}-2.4.8.dll" todir="${dir.nunit.addins}" />
		<copy file="${teamcity.dotnet.nunitaddin}-2.4.8.pdb" todir="${dir.nunit.addins}" />
	</if>
	
	<if test="${build.os == 'Unix'}">
	     <copy file="${dir.nunit}${file.sep}nunit.framework.dll" todir="${dir.build}" />
	</if>
	

	<!--
	<nunit2 verbose="true">
		<formatter type="Xml" usefile="true" extension=".xml" outputdir="${dir.buildreports}" />
		<test assemblyname="${dir.build}${file.sep}${assembly.unittests}" />
	</nunit2>
	
	
	<exec program="${nunit.exe}" failonerror="false" verbose="true">
		<arg line="${dir.build}${file.sep}${assembly.unittests}" />
		<arg line="/xml=${dir.build}${file.sep}TestResult.xml" />
	</exec>
	-->
	
	<if test="${build.os != 'Unix'}"> <!-- Not on Linux, so we can run code coverage -->
	     <exec program="mono ${ncover.exe}" failonerror="false" verbose="true">
		     <arg line="${nunit.exe} ${dir.build}${file.sep}${assembly.unittests} /xml=${dir.build}${file.sep}TestResult.xml" />
		     <arg line="//a &quot;TwitterNET&quot;" />
		     <arg line="//ea &quot;TwitterNET_Tests&quot;" />
		     <arg line="//x ${dir.build}${file.sep}CodeCoverage.xml" />
		     <arg line="//v" />		
	     </exec>
	</if>
	
	<if test="${build.os == 'Unix'}">
	     <exec program="mono" commandline="${nunit.exe} ${dir.build}${file.sep}${assembly.unittests} -xml=${dir.build}${file.sep}TestResult.xml" failonerror="false" verbose="true" />
	</if>
	
	<!-- Code Coverage Report Style -->
	<if test="${build.os != 'Unix'}">
	     <property name="xml.codecoverage" value="${dir.build}${file.sep}CodeCoverage.xml" />
     	<style style="${ncover.xslt}" in="${xml.codecoverage}" out="${dir.buildreports}${file.sep}CodeCoverageReport.html" if="${file::exists(xml.codecoverage)}" />	
	</if>
	
	<!-- NUnit Report Creation (Currently only works on Windows build server)-->
	<if test="${build.os != 'Unix'}" >	
	     <nunit2report todir="${dir.buildreports}">
		     <fileset>
			     <include name="${dir.build}${file.sep}TestResult.xml" />
		     </fileset>
	     </nunit2report>
	</if>
	
	<delete dir="${dir.nunit.addins}" if="${directory::exists(dir.nunit.addins)}" />
	<delete>
		<fileset>
			<include name="${dir.build}${file.sep}*.xml" />
			<include name="*.log" />
		</fileset>
	</delete>	
  </target>
</project>
