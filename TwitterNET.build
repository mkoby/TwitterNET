<?xml version="1.0" encoding="utf-8"?>
<project name="TwitterNET" xmlns="http://nant.sf.net/release/0.85/nant.xsd" default="build">
  <include buildfile="TwitterNET.build.properties" /> <!-- Load our properties -->
  
  <if test="${build.os == 'Unix'}" >
       <include buildfile="TwitterNET.build.linux" /> <!-- Include the Linux specific stuff -->
  </if>
  
  <!-- Load additional NAnt Contrib tasks -->
  <loadtasks assembly="${directory::get-current-directory()}${file.sep}lib${file.sep}nantcontrib${file.sep}bin${file.sep}NAnt.Contrib.Tasks.dll"  />
  
  <target name="build" depends="init, compile, testing" description="The main build target that builds TwitterNet"/>
  
  <target name="clean" depends="init" description="Cleans up from a previous build">
     <if test="${build.os == 'Unix'}" >
		<call target="clean-linux" />
	</if>     
     
     <if test="${build.os != 'Unix'}"> <!-- CLEAN Build on Windows -->
	     <exec program="${build.exe}" 
               commandline="${file.solution} /t:Clean /p:Configuration=${project.config};outdir=${dir.build}${file.sep}  /v:q" verbose="true" />
     </if>
	
	<delete dir="${dir.build}" if="${directory::exists(dir.build)}" />	
  </target>

  <target name="init" depends="" description="Sets up the files, options, and folders for the build">
    <delete dir="${dir.build}" if="${directory::exists(dir.build)}" />
    <mkdir dir="${dir.build}" />
    <mkdir dir="${dir.buildreports}" />
    
    <!--Settings Output-->
    <echo message="Operating System: ${build.os}" />
    <echo message="Solution Folder: ${dir.solution}"/>
    <echo message="Solution File: ${file.solution}"/>
    <echo message="Build Folder: ${dir.build}"/>
    <echo message="Framework Path: ${framework.path}" />
    <if test="${build.os != 'Unix'}">
         <echo message="msbuild: ${build.exe}"/>
    </if>
  </target>

  <target name="compile" depends="init" >
    <echo message="Build Directory is ${dir.build}"/>
    <echo message="Building solution: ${file.solution}" />
	
	<if test="${build.os == 'Unix'}" >
		<call target="compile-linux" />
	</if>
	
	<if test="${build.os != 'Unix'}"> <!-- Build on Windows -->
	     <exec program="${build.exe}" 
               commandline="${file.solution} /t:Clean /p:Configuration=${project.config};outdir=${dir.build}${file.sep}  /v:q" verbose="true" />
	     <exec program="${build.exe}" 
               commandline="${file.solution} /t:Build /p:Configuration=${project.config};outdir=${dir.build}${file.sep}  /v:q" verbose="true" />
     </if>     
     
  </target>

  <target name="testing" depends="init, compile">
	<if test="${property::exists('teamcity.dotnet.nunitaddin')}">
		<mkdir dir="${dir.nunit.addins}" />
		<copy file="${teamcity.dotnet.nunitaddin}-2.4.8.dll" todir="${dir.nunit.addins}" />
		<copy file="${teamcity.dotnet.nunitaddin}-2.4.8.pdb" todir="${dir.nunit.addins}" />
	</if>
	
	<if test="${build.os == 'Unix'}">
	     <call target="testing-linux" />
	</if>
	
	<if test="${build.os != 'Unix'}"> <!-- Not on Linux, so we can run code coverage -->
	     <exec program="${ncover.exe}" failonerror="false" verbose="true">
		     <arg line="${nunit.exe} ${dir.build}${file.sep}${assembly.unittests} /xml=${dir.build}${file.sep}TestResult.xml" />
		     <arg line="//a &quot;TwitterNET&quot;" />
		     <arg line="//ea &quot;TwitterNET_Tests&quot;" />
		     <arg line="//x ${dir.build}${file.sep}CodeCoverage.xml" />
		     <arg line="//v" />		
	     </exec>
	</if>
	
	<!-- Code Coverage Report Style -->
	<if test="${build.os != 'Unix'}">
	     <property name="xml.codecoverage" value="${dir.build}${file.sep}CodeCoverage.xml" />
     	<style style="${ncover.xslt}" in="${xml.codecoverage}" out="${dir.buildreports}${file.sep}CodeCoverageReport.html" if="${file::exists(xml.codecoverage)}" />	
	</if>
	
	<!-- NUnit Report Creation (Currently only works on Windows build server)-->
	<if test="${build.os != 'Unix'}" >	
	     <nunit2report todir="${dir.buildreports}">
		     <fileset>
			     <include name="${dir.build}${file.sep}TestResult.xml" />
		     </fileset>
	     </nunit2report>
	</if>
	
	<delete dir="${dir.nunit.addins}" if="${directory::exists(dir.nunit.addins)}" />
	
	<delete>
	    	<fileset>
	    		<include name="${dir.build}${file.sep}*.xml" />
	    		<include name="*.log" />
	    		<include name="*.txt" />
	    		<include name="${dir.build}${file.sep}nunit*.dll"/>
	    	</fileset>
     </delete>
  </target>
</project>
